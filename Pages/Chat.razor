@page "/chat/{chatroomId}"
@inject ProtectedLocalStorage localStorage
@inject NavigationManager NavManager
@using Privas.Connectors
@using Privas.Data
@using MongoDB.Bson

<PageTitle>Chat</PageTitle>

<Header />
<section>
    <div id="chat_holder">
        <div id="chat_section_one">
            <div id="messages_holder">
                <div id="messages">
                    <div class="message">
                        <div>Michael: </div>
                        <span>Hi</span>
                    </div>
                    <div class="message">
                        <div>Anna: </div>
                        <span>Test Message abcdefghijklmnTest Message abcdefghijklmnTest Message abcdefghijklmnTest Message abcdefghijklmnTest Message abcdefghijklmnTest Message abcdefghijklmnTest Message abcdefghijklmn</span>
                    </div>
                    <div class="user_message message">
                        <span>Mind if i join the conversation?</span>
                    </div>
                </div>
                <input type="text" placeholder="Message..." id="message_input" />
            </div>
        </div>
        <div id="chat_section_two">
            @if(IsOwner)
            {
                <button id="leave_remove_button">
                    Delete Chatroom
                </button>
            } 
            else
            {
                <button id="leave_remove_button" @onclick="LeaveChatroom">
                    Leave chatroom
                </button>                
            }
            <div id="members_holder">
                <span id="members_count">Members: 2</span>
                <span>Anna</span>
                <span>Michael</span>
            </div>
        </div>
    </div>
</section>

@code {
    [Parameter]
    public string? ChatroomId { get; set; }

    public bool IsOwner { get; set; }

    public Chatroom? Chatroom = new()
    {
        Name = "",
        AccessPassword = "",
        OwnerCode = "",
        OwnerUsername = "",
        UniqueCode = ""
    };

    protected override async Task OnAfterRenderAsync(bool firstRender) 
    {
        var chatroomBson = await new ChatroomConnector().Get(ChatroomId);
        var currentUserCode = await localStorage.GetAsync<string>("privas_currentUserCode");
        Chatroom = new()
        {
            Name = chatroomBson["Name"].ToString(),
            UniqueCode = chatroomBson["UniqueCode"].ToString(),
            OwnerUsername = chatroomBson["OwnerUsername"].ToString(),
            OwnerCode = chatroomBson["OwnerCode"].ToString()
        };
        if (Chatroom.OwnerCode == currentUserCode.Value) IsOwner = true;
        StateHasChanged();
    }

    private async Task LeaveChatroom()
    {
        var userCode = await localStorage.GetAsync<string>("privas_currentUserCode");
        MembershipConnector membershipConnector = new();
        await membershipConnector.Delete(userCode.Value);
        NavManager.NavigateTo("/chatrooms");
    }
}