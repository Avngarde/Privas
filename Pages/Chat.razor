@page "/chat/{chatroomId}"
@inject ProtectedLocalStorage localStorage
@inject NavigationManager NavManager
@using Privas.Connectors
@using Privas.Data
@using MongoDB.Bson

<PageTitle>Chat</PageTitle>

<Header />
<section>
    <div id="chat_holder">
        <div id="chat_section_one">
            <div id="messages_holder">
                <div id="messages">
                    <div class="message">
                        <div>Michael: </div>
                        <span>Hi</span>
                    </div>
                    <div class="message">
                        <div>Anna: </div>
                        <span>Test Message abcdefghijklmnTest Message abcdefghijklmnTest Message abcdefghijklmnTest Message abcdefghijklmnTest Message abcdefghijklmnTest Message abcdefghijklmnTest Message abcdefghijklmn</span>
                    </div>
                    <div class="user_message message">
                        <span>Mind if i join the conversation?</span>
                    </div>
                </div>
                <input type="text" placeholder="Message..." id="message_input" />
            </div>
        </div>
        <div id="chat_section_two">
            @if(IsOwner)
            {
                <button id="leave_remove_button" @onclick="DeleteChatroom">
                    Delete Chatroom
                </button>
            } 
            else
            {
                <button id="leave_remove_button" @onclick="LeaveChatroom">
                    Leave chatroom
                </button>                
            }
            <div id="members_holder">
                <span id="members_count">Members: @MemberCount</span>
                @foreach(Membership member in Members)
                {
                    @if(IsOwner)
                    {
                        <span>
                            @member.UserName
                            <button class="member_delete" @onclick="(() => DeleteMember(member.UserId))">X</button>
                        </span>
                    }
                    else 
                    {
                        <span>@member.UserName</span>
                    }
                }
            </div>
        </div>
    </div>
</section>

@code {
    [Parameter]
    public string? ChatroomId { get; set; }

    public bool IsOwner { get; set; }

    public int MemberCount { get; set; }

    public List<Membership> Members = new();

    public Chatroom? Chatroom = new()
    {
        Name = "",
        AccessPassword = "",
        OwnerCode = "",
        OwnerUsername = "",
        UniqueCode = ""
    };

    protected override async Task OnAfterRenderAsync(bool firstRender) 
    {
        if(firstRender)
        {
            ChatroomConnector chatroomConnector = new();
            MembershipConnector membershipConnector = new();


            // Get chatroom data
            var chatroomBson = await chatroomConnector.Get(ChatroomId);
            var currentUserCode = await localStorage.GetAsync<string>("privas_currentUserCode");


            Chatroom = new()
            {
                Name = chatroomBson["Name"].ToString(),
                UniqueCode = chatroomBson["UniqueCode"].ToString(),
                OwnerUsername = chatroomBson["OwnerUsername"].ToString(),
                OwnerCode = chatroomBson["OwnerCode"].ToString()
            };                

            if (Chatroom.OwnerCode == currentUserCode.Value) IsOwner = true;

            // Get chatroom members
            List<BsonDocument> membersBson = await new MembershipConnector().GetAll();
            MemberCount = membersBson.Count;

            foreach(var memberBson in membersBson)
            {
                Members.Add(new Membership()
                    {
                        UserName = memberBson["UserName"].ToString(),
                        ChatId = memberBson["ChatId"].ToString(),
                        UserId = memberBson["UserId"].ToString()
                    });
            }
            StateHasChanged();


            // Check if user is still a member of chatroom every 3 seconds
            while(true)
            {
                await UpdateMembershipStatus();
                await Task.Delay(200);
            } 
        }
    }

    private async Task LeaveChatroom()
    {
        var userCode = await localStorage.GetAsync<string>("privas_currentUserCode");
        MembershipConnector membershipConnector = new();
        await membershipConnector.Delete(userCode.Value);
        NavManager.NavigateTo("/chatrooms");
    }

    private async Task DeleteChatroom()
    {
        var userCode = await localStorage.GetAsync<string>("privas_currentUserCode");
        MembershipConnector membershipConnector = new();
        ChatroomConnector chatroomConnector = new();
        await membershipConnector.DeleteAllByChatId(ChatroomId);
        await chatroomConnector.Delete(ChatroomId);
        NavManager.NavigateTo("/chatrooms");
    }

    private async Task DeleteMember(string userId)
    {
        await new MembershipConnector().Delete(userId);
        var toDelete = Members.Where(member => member.UserId == userId).FirstOrDefault();
        Members.Remove(toDelete);
        MemberCount--;
        StateHasChanged();
    }

    private async Task UpdateMembershipStatus()
    {
        ChatroomConnector chatroomConnector = new();
        MembershipConnector membershipConnector = new();
        var currentUserCode = await localStorage.GetAsync<string>("privas_currentUserCode");

        // Check if Chatroom still exists
        if (await chatroomConnector.Get(ChatroomId) == null)
        {
            await membershipConnector.DeleteAllByChatId(ChatroomId);
            NavManager.NavigateTo("/chatrooms");
        }

        List<BsonDocument> members;
        BsonDocument member;

        members = await membershipConnector.GetAll();
        member = members.Where(member => member["UserId"] == currentUserCode.Value).FirstOrDefault();

        Console.Write(members);

        if (member != null)
        {
            StateHasChanged();                     
        }
        else
        {
            if (IsOwner)
            {
                await chatroomConnector.Delete(ChatroomId);
                await membershipConnector.DeleteAllByChatId(ChatroomId);
            }
            NavManager.NavigateTo("/chatrooms");
        }        
    }
}