@page "/chat/{chatroomId}"
@inject ProtectedLocalStorage localStorage
@inject NavigationManager NavManager
@using Privas.Connectors
@using Privas.Data
@using MongoDB.Bson

<PageTitle>Chat</PageTitle>

<Header />
<section>
    <div id="chat_holder">
        <div id="chat_section_one">
            <div id="messages_holder">
                <div id="messages">
                @foreach(Message message in Messages)
                {
                    @if (message.IsUserMessage)
                    {
                        <div class="user_message message">
                            <span>@message.Text</span>
                        </div>
                    }
                    else
                    {
                        <div class="message">
                            <div>@message.UserName: </div>
                            <span>@message.Text</span>
                        </div>                            
                    }
                }
                </div>
                <input type="text" placeholder="Message..." id="message_input"
                    @bind = "message"
                    @onkeypress = "SendMessage" />
            </div>
        </div>
        <div id="chat_section_two">
            @if(IsOwner)
            {
                <button id="leave_remove_button" @onclick="DeleteChatroom">
                    Delete Chatroom
                </button>
            } 
            else
            {
                <button id="leave_remove_button" @onclick="LeaveChatroom">
                    Leave chatroom
                </button>                
            }
            <div id="members_holder">
                <span id="members_count">Members: @MemberCount</span>
                @foreach(Membership member in Members)
                {
                    @if(IsOwner)
                    {
                        <span>
                            @member.UserName
                            <button class="member_delete" @onclick="(() => DeleteMember(member.UserId))">X</button>
                        </span>
                    }
                    else 
                    {
                        <span>@member.UserName</span>
                    }
                }
            </div>
        </div>
    </div>
</section>

@code {
    [Parameter]
    public string? ChatroomId { get; set; }

    public bool IsOwner { get; set; }

    public int MemberCount { get; set; }

    public List<Membership> Members = new();

    public List<Message> Messages = new();

    public string? message { get; set; }

    public Chatroom? Chatroom = new()
    {
        Name = "",
        AccessPassword = "",
        OwnerCode = "",
        OwnerUsername = "",
        UniqueCode = ""
    };

    protected override async Task OnAfterRenderAsync(bool firstRender) 
    {
        if(firstRender)
        {
            ChatroomConnector chatroomConnector = new();
            MembershipConnector membershipConnector = new();


            // Get chatroom data
            var chatroomBson = await chatroomConnector.Get(ChatroomId);
            var currentUserCode = await localStorage.GetAsync<string>("privas_currentUserCode");


            Chatroom = new()
            {
                Name = chatroomBson["Name"].ToString(),
                UniqueCode = chatroomBson["UniqueCode"].ToString(),
                OwnerUsername = chatroomBson["OwnerUsername"].ToString(),
                OwnerCode = chatroomBson["OwnerCode"].ToString()
            };                

            if (Chatroom.OwnerCode == currentUserCode.Value) IsOwner = true;

            // Get chatroom members
            Members = await UpdateMembers();
            MemberCount = Members.Count;

            Messages = await GetMessages();
            StateHasChanged();

            // Check if user is still a member of chatroom every 3 seconds
            while(true)
            {
                bool doContinue = await UpdateMembershipStatus();
                Messages = await GetMessages();
                Members = await UpdateMembers();
                MemberCount = Members.Count;
                if (!doContinue)
                {
                    break;
                }
                await Task.Delay(200);
            } 

            NavManager.NavigateTo("/chatrooms"); // This code will be executed if the while above is breaked
        }
    }

    private async Task LeaveChatroom()
    {
        var userCode = await localStorage.GetAsync<string>("privas_currentUserCode");
        MembershipConnector membershipConnector = new();
        await membershipConnector.Delete(userCode.Value);
        NavManager.NavigateTo("/chatrooms");
    }

    private async Task DeleteChatroom()
    {
        var userCode = await localStorage.GetAsync<string>("privas_currentUserCode");
        MembershipConnector membershipConnector = new();
        ChatroomConnector chatroomConnector = new();
        await membershipConnector.DeleteAllByChatId(ChatroomId);
        await chatroomConnector.Delete(ChatroomId);
        NavManager.NavigateTo("/chatrooms");
    }

    private async Task DeleteMember(string userId)
    {
        await new MembershipConnector().Delete(userId);
        var toDelete = Members.Where(member => member.UserId == userId).FirstOrDefault();
        Members.Remove(toDelete);
        MemberCount--;
        StateHasChanged();
    }

    private async Task<bool> UpdateMembershipStatus()
    {
        ChatroomConnector chatroomConnector = new();
        MembershipConnector membershipConnector = new();
        var currentUserCode = await localStorage.GetAsync<string>("privas_currentUserCode");

        // Check if Chatroom still exists
        if (await chatroomConnector.Get(ChatroomId) == null)
        {
            await membershipConnector.DeleteAllByChatId(ChatroomId);
            NavManager.NavigateTo("/chatrooms");
        }

        List<BsonDocument> members;
        BsonDocument member;

        members = await membershipConnector.GetAll();
        member = members.Where(member => member["UserId"] == currentUserCode.Value).FirstOrDefault();

        if (member != null)
        {
            StateHasChanged();  
        }
        else
        {
            if (IsOwner)
            {
                await chatroomConnector.Delete(ChatroomId);
                await membershipConnector.DeleteAllByChatId(ChatroomId);
            }

            return false;
        }

        return true;
    }

    private async Task SendMessage(KeyboardEventArgs e)
    {
        if (e.Code != "Enter") return;

        var userName = await localStorage.GetAsync<string>("privas_currentUserName");
        var userCode = await localStorage.GetAsync<string>("privas_currentUserCode");
        MessageConnector messageConnector = new();
        Message newMessage = new() 
        {
            ChatId = ChatroomId,
            UserName = userName.Value,
            UserId = userCode.Value,
            Text = message
        };
        await messageConnector.Add(newMessage.ToBsonDocument());
        message = "";
    }

    private async Task<List<Message>> GetMessages()
    {
        var userCode = await localStorage.GetAsync<string>("privas_currentUserCode");
        MessageConnector messageConnector = new();
        List<BsonDocument> allMessages = await messageConnector.GetAll();
        var chatMessages = allMessages.Where(message => message["ChatId"] == ChatroomId).ToList();
        List<Message> messages = new();
        foreach(var message in chatMessages)
        {
            messages.Add(
                new Message()
                    {
                        ChatId = ChatroomId,
                        UserId = message["UserId"].ToString(),
                        UserName = message["UserName"].ToString(),
                        Text = message["Text"].ToString(),
                        IsUserMessage = userCode.Value == message["UserId"].ToString() ? true : false
                    }
            );
        }
        return messages;
    }

    private async Task<List<Membership>> UpdateMembers()
    {
        MembershipConnector membershipConnector = new();
        var membersBson = await membershipConnector.GetAllByChatId(ChatroomId);
        List<Membership> members = new();
        foreach(var memberBson in membersBson)
        {
            members.Add(new Membership()
            {
                UserName = memberBson["UserName"].ToString(),
                ChatId = memberBson["ChatId"].ToString(),
                UserId = memberBson["UserId"].ToString()
            });
        }

        return members;
    }
}