@page "/chatrooms"
@inject ProtectedLocalStorage localStorage
@using Privas.Connectors
@using Privas.Data
@using MongoDB.Bson;
@inject NavigationManager NavManager

<PageTitle>Chatrooms</PageTitle>

<Header />
<div id="chatrooms_container">
    <div id="chatrooms_list">
        @foreach (var chatroom in chatrooms) 
        {
            var uniqueCode = chatroom["UniqueCode"];
            <div class="chatroom">
                <div class="chatroom_name"><b>@chatroom["Name"]</b></div>
                <div class="chatroom_owner_username">Owner: @chatroom["OwnerUsername"]</div>
                <button class="chatroom_join_button" @onclick="(async () => await JoinChatroom(uniqueCode?.ToString()))">Join</button>
            </div>
        }
    </div>
    <div id="search_holder">
        <input type="text" id="chatroom_search_input" placeholder="Search..." 
            @oninput = "SearchChatroom"  />
    </div>
</div>

@code {
    private ChatroomConnector chatroomConnector = new();
    private List<MongoDB.Bson.BsonDocument> chatrooms = new();
    private List<MongoDB.Bson.BsonDocument> chatroomsAll = new();
    private string? search;

    private void SearchChatroom(ChangeEventArgs e)
    {
        search = e.Value?.ToString();
        if (search == null || search == "") chatrooms = chatroomsAll;
        else 
        {
            search = search?.ToLower();
            chatrooms = chatrooms.FindAll(chatroom => chatroom["Name"]
                .ToString()
                .ToLower()
                .Contains(search));
        }
    }

    private async Task JoinChatroom(string uniqueCode)
    {
        var userName = await localStorage.GetAsync<string>("privas_currentUserName");
        var userCode = await localStorage.GetAsync<string>("privas_currentUserCode");
        MembershipConnector membershipConnector = new();
        Membership membership = new() 
        {
            ChatId = uniqueCode,
            UserId = userCode.Value,
            UserName = userName.Value
        };
        await membershipConnector.Add(membership.ToBsonDocument());
        NavManager.NavigateTo("/chat/"+uniqueCode);
    }

    protected async override Task OnInitializedAsync()
    {
        chatrooms = await chatroomConnector.GetAll();
        chatrooms = chatrooms.OrderBy(x => x["Name"]).ToList();
        chatroomsAll = chatrooms;
        StateHasChanged();
    }
}
