@page "/chatrooms"
@inject ProtectedLocalStorage localStorage
@using Privas.Connectors
@using Privas.Data
@using MongoDB.Bson;
@inject IToastService toastService;
@inject NavigationManager NavManager

<PageTitle>Chatrooms</PageTitle>

<Header />
@if (showPasswordForm)
{
    <div id="password_form_background">
        <div id="password_form_holder">
            <span>
                <button id="password_close_button" @onclick="(() => showPasswordForm = false)">X</button>
            </span>
            <span>
                <input type="password" placeholder="Password" 
                    @onkeydown="VerifyPasswordEnter"
                    @oninput = "((ChangeEventArgs e) => password = e?.Value?.ToString())" 
                />
                <button id="password_join_button" 
                @onclick="VerifyPassword">
                    Join
                </button>
            </span>
        </div>
    </div>    
}
<div id="chatrooms_container">
    <div id="chatrooms_list">
        @foreach (var chatroom in chatrooms) 
        {
            var accessPassword = chatroom["AccessPassword"].ToString();
            var uniqueCode = chatroom["UniqueCode"].ToString();
            <div class="chatroom">
                <div class="chatroom_name"><b>@chatroom["Name"]</b></div>
                <div class="chatroom_owner_username">Owner: @chatroom["OwnerUsername"]</div>
                <button class="chatroom_join_button" 
                    @onclick="(() => SetPasswordFormData(accessPassword, uniqueCode))">
                        Join
                </button>
            </div>
        }
    </div>
    <div id="search_holder">
        <input type="text" id="chatroom_search_input" placeholder="Search..." 
            @oninput = "SearchChatroom"  />
    </div>
</div>

@code {
    private ChatroomConnector chatroomConnector = new();
    private List<MongoDB.Bson.BsonDocument> chatrooms = new();
    private List<MongoDB.Bson.BsonDocument> chatroomsAll = new();
    private bool showPasswordForm;
    private string? currentFormCorrectPassword;
    private string? currentFormUniqueCode;
    private string? password;
    private string? search;

    private void SearchChatroom(ChangeEventArgs e)
    {
        search = e.Value?.ToString();
        if (search == null || search == "") chatrooms = chatroomsAll;
        else 
        {
            search = search?.ToLower();
            chatrooms = chatrooms.FindAll(chatroom => chatroom["Name"]
                .ToString()
                .ToLower()
                .Contains(search));
        }
    }

    private async Task JoinChatroom(string uniqueCode)
    {
        var userName = await localStorage.GetAsync<string>("privas_currentUserName");
        var userCode = await localStorage.GetAsync<string>("privas_currentUserCode");
        MembershipConnector membershipConnector = new();
        if (await membershipConnector.Get(userCode.Value) != null)
        {
            toastService.ShowError("", "You already belong to a chatroom");
        }
        else 
        {
            Membership membership = new() 
            {
                ChatId = uniqueCode,
                UserId = userCode.Value,
                UserName = userName.Value
            };
            await membershipConnector.Add(membership.ToBsonDocument());
            NavManager.NavigateTo("/chat/"+uniqueCode);
        }
    }

    private void SetPasswordFormData(string accessPassword, string chatroomId)
    {
        currentFormCorrectPassword = accessPassword;
        currentFormUniqueCode = chatroomId;
        showPasswordForm = true;
    }

    private async Task VerifyPassword()
    {
        if (password == currentFormCorrectPassword)
        {
            await JoinChatroom(currentFormUniqueCode); 
        }
        else
        {
            toastService.ShowError("Invalid password");
        }
    }

    private async Task VerifyPasswordEnter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter")
        {
            await VerifyPassword();          
        }        
    }

    protected async override Task OnInitializedAsync()
    {
        chatrooms = await chatroomConnector.GetAll();
        chatrooms = chatrooms.OrderBy(x => x["Name"]).ToList();
        chatroomsAll = chatrooms;
        StateHasChanged();
    }
}
