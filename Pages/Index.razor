@page "/"
@inject ProtectedLocalStorage localStorage
@inject NavigationManager NavManager
@using Privas.SupportClasses
@using Privas.Connectors
@inject IToastService toastService

<PageTitle>Index</PageTitle>

<div id="index_container">
    <div id="first_half">
        <div id="app_header">Privas - Feel the absolute privacy!</div>
        <div id="app_description">Create secured chatrooms where you can chat being absolutley private and safe</div>
    </div>
    <div id="second_half">
        <div id="features">
            <div class="feature">
                <div class="feature_icon">🔒</div>
                <div class="feature_header">No account</div>
                <div class="feature_description">Explore all of Privas features without any of your personal data being stored and used.</div>
            </div>
            <div class="feature">
                <div class="feature_icon">❌</div>
                <div class="feature_header">Deleted messages</div>
                <div class="feature_description">Privas allow you to completly delete all the messages from our database when you are done talking</div>
            </div>
            <div class="feature">
                <div class="feature_icon">🔑</div>
                <div class="feature_header">Password secured</div>
                <div class="feature_description">All the chatrooms are protected with password, no one unauthorized will be able to read your messages!</div>
            </div>
        </div>
    </div>
    <div id="username_form">
        <input type="text" placeholder="Username" @bind="username" /><button @onclick="SetUsername">Set username</button>
    </div>
</div>

@code {
    private string? username;

    private async Task SetUsername()
    {
        if (username != null) 
        {
            var userCode = await localStorage.GetAsync<string>("privas_currentUserCode");
            if (userCode.Value != null)
            {
                toastService.ShowInfo("Deleting old messages, and owned chatrooms to create new user session...", "User session already exists");
                MembershipConnector membershipConnector = new();
                ChatroomConnector chatroomConnector = new();
                await localStorage.DeleteAsync("privas_currentUserName");
                await localStorage.DeleteAsync("privas_currentUserCode");
                await membershipConnector.Delete(userCode.Value);
                await chatroomConnector.DeleteByUserCode(userCode.Value);
            }
            await localStorage.SetAsync("privas_currentUserName", username);
            await localStorage.SetAsync("privas_currentUserCode", UserCodeGenerator.Generate());
            toastService.ShowSuccess("", "Username set");
            await GoToChatrooms();
        }
    }

    private async Task GoToChatrooms() 
    {
        var username = await localStorage.GetAsync<string>("privas_currentUserName");
        var userCode = await localStorage.GetAsync<string>("privas_currentUserCode");
        if (username.Value != null && userCode.Value != null) 
        {
            NavManager.NavigateTo("/chatrooms");
        }
    }
}